//
// HomepageView.swift
// Generated by Core Animator version 1.3.2 on 6/24/18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class HomepagePassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class HomepageView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 380, height: 480))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:380, height:480)
		__scaling__.center = CGPoint(x:190.0, y:240.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let a1__root = HomepagePassthroughView()
		let a1__xScale = HomepagePassthroughView()
		let a1__yScale = HomepagePassthroughView()
		let a1 = UIImageView()
		let imgA1 = UIImage(named:"A1.png", in: bundle, compatibleWith: nil)
		if imgA1 == nil {
			print("** Warning: Could not create image from 'A1.png'")
		}
		a1.image = imgA1
		a1.contentMode = .center
		a1.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		a1__root.layer.position = CGPoint(x:119.866, y:306.232)
		a1__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		a1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		a1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(a1__root)
		a1__root.addSubview(a1__xScale)
		a1__xScale.addSubview(a1__yScale)
		a1__yScale.addSubview(a1)
		__scaling__.addSubview(a1__root)
		viewsByName["A1__root"] = a1__root
		viewsByName["A1__xScale"] = a1__xScale
		viewsByName["A1__yScale"] = a1__yScale
		viewsByName["A1"] = a1

		let b1__root = HomepagePassthroughView()
		let b1__xScale = HomepagePassthroughView()
		let b1__yScale = HomepagePassthroughView()
		let b1 = UIImageView()
		let imgB1 = UIImage(named:"B1.png", in: bundle, compatibleWith: nil)
		if imgB1 == nil {
			print("** Warning: Could not create image from 'B1.png'")
		}
		b1.image = imgB1
		b1.contentMode = .center
		b1.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		b1__root.layer.position = CGPoint(x:191.500, y:354.631)
		b1__xScale.transform = CGAffineTransform(scaleX: 0.08, y: 1.00)
		b1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.08)
		b1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(b1__root)
		b1__root.addSubview(b1__xScale)
		b1__xScale.addSubview(b1__yScale)
		b1__yScale.addSubview(b1)
		__scaling__.addSubview(b1__root)
		viewsByName["B1__root"] = b1__root
		viewsByName["B1__xScale"] = b1__xScale
		viewsByName["B1__yScale"] = b1__yScale
		viewsByName["B1"] = b1

		let boxerwachlerHead__root = HomepagePassthroughView()
		let boxerwachlerHead__xScale = HomepagePassthroughView()
		let boxerwachlerHead__yScale = HomepagePassthroughView()
		let boxerwachlerHead = UIImageView()
		let imgBoxerwachlerHead = UIImage(named:"boxerwachler-head.png", in: bundle, compatibleWith: nil)
		if imgBoxerwachlerHead == nil {
			print("** Warning: Could not create image from 'boxerwachler-head.png'")
		}
		boxerwachlerHead.image = imgBoxerwachlerHead
		boxerwachlerHead.contentMode = .center
		boxerwachlerHead.bounds = CGRect(x:0, y:0, width:400.0, height:157.0)
		boxerwachlerHead__root.layer.position = CGPoint(x:190.000, y:71.000)
		boxerwachlerHead__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		boxerwachlerHead__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		boxerwachlerHead__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(boxerwachlerHead__root)
		boxerwachlerHead__root.addSubview(boxerwachlerHead__xScale)
		boxerwachlerHead__xScale.addSubview(boxerwachlerHead__yScale)
		boxerwachlerHead__yScale.addSubview(boxerwachlerHead)
		__scaling__.addSubview(boxerwachlerHead__root)
		viewsByName["boxerwachler-head__root"] = boxerwachlerHead__root
		viewsByName["boxerwachler-head__xScale"] = boxerwachlerHead__xScale
		viewsByName["boxerwachler-head__yScale"] = boxerwachlerHead__yScale
		viewsByName["boxerwachler-head"] = boxerwachlerHead

		let boxerwachlerHeadMask__root = HomepagePassthroughView()
		let boxerwachlerHeadMask__xScale = HomepagePassthroughView()
		let boxerwachlerHeadMask__yScale = HomepagePassthroughView()
		let boxerwachlerHeadMask = UIImageView()
		let imgSquare = UIImage(named:"square.png", in: bundle, compatibleWith: nil)
		if imgSquare == nil {
			print("** Warning: Could not create image from 'square.png'")
		}
		boxerwachlerHeadMask.image = imgSquare
		boxerwachlerHeadMask.contentMode = .center
		boxerwachlerHeadMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.0)
		boxerwachlerHeadMask__root.layer.position = CGPoint(x:-212.812, y:78.500)
		boxerwachlerHeadMask__xScale.transform = CGAffineTransform(scaleX: 2.29, y: 1.00)
		boxerwachlerHeadMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.85)
		boxerwachlerHeadMask__root.transform = CGAffineTransform(rotationAngle: 0.000)
		boxerwachlerHead.addSubview(boxerwachlerHeadMask__root)
		boxerwachlerHeadMask__root.addSubview(boxerwachlerHeadMask__xScale)
		boxerwachlerHeadMask__xScale.addSubview(boxerwachlerHeadMask__yScale)
		boxerwachlerHeadMask__yScale.addSubview(boxerwachlerHeadMask)
		boxerwachlerHead.mask = boxerwachlerHeadMask__root
		viewsByName["boxerwachler-head_mask__root"] = boxerwachlerHeadMask__root
		viewsByName["boxerwachler-head_mask__xScale"] = boxerwachlerHeadMask__xScale
		viewsByName["boxerwachler-head_mask__yScale"] = boxerwachlerHeadMask__yScale
		viewsByName["boxerwachler-head_mask"] = boxerwachlerHeadMask

		let c1__root = HomepagePassthroughView()
		let c1__xScale = HomepagePassthroughView()
		let c1__yScale = HomepagePassthroughView()
		let c1 = UIImageView()
		let imgC1 = UIImage(named:"C1.png", in: bundle, compatibleWith: nil)
		if imgC1 == nil {
			print("** Warning: Could not create image from 'C1.png'")
		}
		c1.image = imgC1
		c1.contentMode = .center
		c1.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		c1__root.layer.position = CGPoint(x:136.496, y:279.160)
		c1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		c1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		c1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(c1__root)
		c1__root.addSubview(c1__xScale)
		c1__xScale.addSubview(c1__yScale)
		c1__yScale.addSubview(c1)
		__scaling__.addSubview(c1__root)
		viewsByName["C1__root"] = c1__root
		viewsByName["C1__xScale"] = c1__xScale
		viewsByName["C1__yScale"] = c1__yScale
		viewsByName["C1"] = c1

		let e1__root = HomepagePassthroughView()
		let e1__xScale = HomepagePassthroughView()
		let e1__yScale = HomepagePassthroughView()
		let e1 = UIImageView()
		let imgE1 = UIImage(named:"E1.png", in: bundle, compatibleWith: nil)
		if imgE1 == nil {
			print("** Warning: Could not create image from 'E1.png'")
		}
		e1.image = imgE1
		e1.contentMode = .center
		e1.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		e1__root.layer.position = CGPoint(x:186.000, y:192.170)
		e1__xScale.transform = CGAffineTransform(scaleX: 0.50, y: 1.00)
		e1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.50)
		e1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(e1__root)
		e1__root.addSubview(e1__xScale)
		e1__xScale.addSubview(e1__yScale)
		e1__yScale.addSubview(e1)
		__scaling__.addSubview(e1__root)
		viewsByName["E1__root"] = e1__root
		viewsByName["E1__xScale"] = e1__xScale
		viewsByName["E1__yScale"] = e1__yScale
		viewsByName["E1"] = e1

		let e2__root = HomepagePassthroughView()
		let e2__xScale = HomepagePassthroughView()
		let e2__yScale = HomepagePassthroughView()
		let e2 = UIImageView()
		let imgE2 = UIImage(named:"E2.png", in: bundle, compatibleWith: nil)
		if imgE2 == nil {
			print("** Warning: Could not create image from 'E2.png'")
		}
		e2.image = imgE2
		e2.contentMode = .center
		e2.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		e2__root.layer.position = CGPoint(x:156.176, y:306.658)
		e2__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		e2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		e2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(e2__root)
		e2__root.addSubview(e2__xScale)
		e2__xScale.addSubview(e2__yScale)
		e2__yScale.addSubview(e2)
		__scaling__.addSubview(e2__root)
		viewsByName["E2__root"] = e2__root
		viewsByName["E2__xScale"] = e2__xScale
		viewsByName["E2__yScale"] = e2__yScale
		viewsByName["E2"] = e2

		let e3__root = HomepagePassthroughView()
		let e3__xScale = HomepagePassthroughView()
		let e3__yScale = HomepagePassthroughView()
		let e3 = UIImageView()
		let imgE3 = UIImage(named:"E3.png", in: bundle, compatibleWith: nil)
		if imgE3 == nil {
			print("** Warning: Could not create image from 'E3.png'")
		}
		e3.image = imgE3
		e3.contentMode = .center
		e3.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		e3__root.layer.position = CGPoint(x:138.867, y:333.641)
		e3__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		e3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		e3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(e3__root)
		e3__root.addSubview(e3__xScale)
		e3__xScale.addSubview(e3__yScale)
		e3__yScale.addSubview(e3)
		__scaling__.addSubview(e3__root)
		viewsByName["E3__root"] = e3__root
		viewsByName["E3__xScale"] = e3__xScale
		viewsByName["E3__yScale"] = e3__yScale
		viewsByName["E3"] = e3

		let h1__root = HomepagePassthroughView()
		let h1__xScale = HomepagePassthroughView()
		let h1__yScale = HomepagePassthroughView()
		let h1 = UIImageView()
		let imgH1 = UIImage(named:"H1.png", in: bundle, compatibleWith: nil)
		if imgH1 == nil {
			print("** Warning: Could not create image from 'H1.png'")
		}
		h1.image = imgH1
		h1.contentMode = .center
		h1.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		h1__root.layer.position = CGPoint(x:251.973, y:306.117)
		h1__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		h1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		h1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(h1__root)
		h1__root.addSubview(h1__xScale)
		h1__xScale.addSubview(h1__yScale)
		h1__yScale.addSubview(h1)
		__scaling__.addSubview(h1__root)
		viewsByName["H1__root"] = h1__root
		viewsByName["H1__xScale"] = h1__xScale
		viewsByName["H1__yScale"] = h1__yScale
		viewsByName["H1"] = h1

		let i1__root = HomepagePassthroughView()
		let i1__xScale = HomepagePassthroughView()
		let i1__yScale = HomepagePassthroughView()
		let i1 = UIImageView()
		let imgI1 = UIImage(named:"I1.png", in: bundle, compatibleWith: nil)
		if imgI1 == nil {
			print("** Warning: Could not create image from 'I1.png'")
		}
		i1.image = imgI1
		i1.contentMode = .center
		i1.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		i1__root.layer.position = CGPoint(x:164.960, y:333.538)
		i1__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		i1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		i1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(i1__root)
		i1__root.addSubview(i1__xScale)
		i1__xScale.addSubview(i1__yScale)
		i1__yScale.addSubview(i1)
		__scaling__.addSubview(i1__root)
		viewsByName["I1__root"] = i1__root
		viewsByName["I1__xScale"] = i1__xScale
		viewsByName["I1__yScale"] = i1__yScale
		viewsByName["I1"] = i1

		let i2__root = HomepagePassthroughView()
		let i2__xScale = HomepagePassthroughView()
		let i2__yScale = HomepagePassthroughView()
		let i2 = UIImageView()
		let imgI2 = UIImage(named:"I2.png", in: bundle, compatibleWith: nil)
		if imgI2 == nil {
			print("** Warning: Could not create image from 'I2.png'")
		}
		i2.image = imgI2
		i2.contentMode = .center
		i2.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		i2__root.layer.position = CGPoint(x:254.993, y:354.775)
		i2__xScale.transform = CGAffineTransform(scaleX: 0.12, y: 1.00)
		i2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.12)
		i2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(i2__root)
		i2__root.addSubview(i2__xScale)
		i2__xScale.addSubview(i2__yScale)
		i2__yScale.addSubview(i2)
		__scaling__.addSubview(i2__root)
		viewsByName["I2__root"] = i2__root
		viewsByName["I2__xScale"] = i2__xScale
		viewsByName["I2__yScale"] = i2__yScale
		viewsByName["I2"] = i2

		let i3__root = HomepagePassthroughView()
		let i3__xScale = HomepagePassthroughView()
		let i3__yScale = HomepagePassthroughView()
		let i3 = UIImageView()
		let imgI3 = UIImage(named:"I3.png", in: bundle, compatibleWith: nil)
		if imgI3 == nil {
			print("** Warning: Could not create image from 'I3.png'")
		}
		i3.image = imgI3
		i3.contentMode = .center
		i3.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		i3__root.layer.position = CGPoint(x:235.069, y:279.438)
		i3__xScale.transform = CGAffineTransform(scaleX: 0.28, y: 1.00)
		i3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.28)
		i3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(i3__root)
		i3__root.addSubview(i3__xScale)
		i3__xScale.addSubview(i3__yScale)
		i3__yScale.addSubview(i3)
		__scaling__.addSubview(i3__root)
		viewsByName["I3__root"] = i3__root
		viewsByName["I3__xScale"] = i3__xScale
		viewsByName["I3__yScale"] = i3__yScale
		viewsByName["I3"] = i3

		let i4__root = HomepagePassthroughView()
		let i4__xScale = HomepagePassthroughView()
		let i4__yScale = HomepagePassthroughView()
		let i4 = UIImageView()
		let imgI4 = UIImage(named:"I4.png", in: bundle, compatibleWith: nil)
		if imgI4 == nil {
			print("** Warning: Could not create image from 'I4.png'")
		}
		i4.image = imgI4
		i4.contentMode = .center
		i4.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		i4__root.layer.position = CGPoint(x:109.715, y:355.020)
		i4__root.alpha = 0.95
		i4__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		i4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		i4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(i4__root)
		i4__root.addSubview(i4__xScale)
		i4__xScale.addSubview(i4__yScale)
		i4__yScale.addSubview(i4)
		__scaling__.addSubview(i4__root)
		viewsByName["I4__root"] = i4__root
		viewsByName["I4__xScale"] = i4__xScale
		viewsByName["I4__yScale"] = i4__yScale
		viewsByName["I4"] = i4

		let l1__root = HomepagePassthroughView()
		let l1__xScale = HomepagePassthroughView()
		let l1__yScale = HomepagePassthroughView()
		let l1 = UIImageView()
		let imgL1 = UIImage(named:"L1.png", in: bundle, compatibleWith: nil)
		if imgL1 == nil {
			print("** Warning: Could not create image from 'L1.png'")
		}
		l1.image = imgL1
		l1.contentMode = .center
		l1.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		l1__root.layer.position = CGPoint(x:112.715, y:334.020)
		l1__root.alpha = 0.97
		l1__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		l1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		l1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(l1__root)
		l1__root.addSubview(l1__xScale)
		l1__xScale.addSubview(l1__yScale)
		l1__yScale.addSubview(l1)
		__scaling__.addSubview(l1__root)
		viewsByName["L1__root"] = l1__root
		viewsByName["L1__xScale"] = l1__xScale
		viewsByName["L1__yScale"] = l1__yScale
		viewsByName["L1"] = l1

		let n1__root = HomepagePassthroughView()
		let n1__xScale = HomepagePassthroughView()
		let n1__yScale = HomepagePassthroughView()
		let n1 = UIImageView()
		let imgN1 = UIImage(named:"N1.png", in: bundle, compatibleWith: nil)
		if imgN1 == nil {
			print("** Warning: Could not create image from 'N1.png'")
		}
		n1.image = imgN1
		n1.contentMode = .center
		n1.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		n1__root.layer.position = CGPoint(x:223.957, y:306.686)
		n1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		n1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		n1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(n1__root)
		n1__root.addSubview(n1__xScale)
		n1__xScale.addSubview(n1__yScale)
		n1__yScale.addSubview(n1)
		__scaling__.addSubview(n1__root)
		viewsByName["N1__root"] = n1__root
		viewsByName["N1__xScale"] = n1__xScale
		viewsByName["N1__yScale"] = n1__yScale
		viewsByName["N1"] = n1

		let n2__root = HomepagePassthroughView()
		let n2__xScale = HomepagePassthroughView()
		let n2__yScale = HomepagePassthroughView()
		let n2 = UIImageView()
		let imgN2 = UIImage(named:"N2.png", in: bundle, compatibleWith: nil)
		if imgN2 == nil {
			print("** Warning: Could not create image from 'N2.png'")
		}
		n2.image = imgN2
		n2.contentMode = .center
		n2.layer.anchorPoint = CGPoint(x:0.506, y:0.414)
		n2.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		n2__root.layer.position = CGPoint(x:236.251, y:353.650)
		n2__xScale.transform = CGAffineTransform(scaleX: 0.12, y: 1.00)
		n2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.12)
		n2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(n2__root)
		n2__root.addSubview(n2__xScale)
		n2__xScale.addSubview(n2__yScale)
		n2__yScale.addSubview(n2)
		__scaling__.addSubview(n2__root)
		viewsByName["N2__root"] = n2__root
		viewsByName["N2__xScale"] = n2__xScale
		viewsByName["N2__yScale"] = n2__yScale
		viewsByName["N2"] = n2

		let o1__root = HomepagePassthroughView()
		let o1__xScale = HomepagePassthroughView()
		let o1__yScale = HomepagePassthroughView()
		let o1 = UIImageView()
		let imgO1 = UIImage(named:"O1.png", in: bundle, compatibleWith: nil)
		if imgO1 == nil {
			print("** Warning: Could not create image from 'O1.png'")
		}
		o1.image = imgO1
		o1.contentMode = .center
		o1.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		o1__root.layer.position = CGPoint(x:186.000, y:278.788)
		o1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		o1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		o1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(o1__root)
		o1__root.addSubview(o1__xScale)
		o1__xScale.addSubview(o1__yScale)
		o1__yScale.addSubview(o1)
		__scaling__.addSubview(o1__root)
		viewsByName["O1__root"] = o1__root
		viewsByName["O1__xScale"] = o1__xScale
		viewsByName["O1__yScale"] = o1__yScale
		viewsByName["O1"] = o1

		let o2__root = HomepagePassthroughView()
		let o2__xScale = HomepagePassthroughView()
		let o2__yScale = HomepagePassthroughView()
		let o2 = UIImageView()
		let imgO2 = UIImage(named:"O2.png", in: bundle, compatibleWith: nil)
		if imgO2 == nil {
			print("** Warning: Could not create image from 'O2.png'")
		}
		o2.image = imgO2
		o2.contentMode = .center
		o2.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		o2__root.layer.position = CGPoint(x:148.715, y:355.020)
		o2__root.alpha = 0.91
		o2__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		o2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		o2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(o2__root)
		o2__root.addSubview(o2__xScale)
		o2__xScale.addSubview(o2__yScale)
		o2__yScale.addSubview(o2)
		__scaling__.addSubview(o2__root)
		viewsByName["O2__root"] = o2__root
		viewsByName["O2__xScale"] = o2__xScale
		viewsByName["O2__yScale"] = o2__yScale
		viewsByName["O2"] = o2

		let r1__root = HomepagePassthroughView()
		let r1__xScale = HomepagePassthroughView()
		let r1__yScale = HomepagePassthroughView()
		let r1 = UIImageView()
		let imgR1 = UIImage(named:"R1.png", in: bundle, compatibleWith: nil)
		if imgR1 == nil {
			print("** Warning: Could not create image from 'R1.png'")
		}
		r1.image = imgR1
		r1.contentMode = .center
		r1.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		r1__root.layer.position = CGPoint(x:220.951, y:243.000)
		r1__xScale.transform = CGAffineTransform(scaleX: 0.30, y: 1.00)
		r1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.30)
		r1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(r1__root)
		r1__root.addSubview(r1__xScale)
		r1__xScale.addSubview(r1__yScale)
		r1__yScale.addSubview(r1)
		__scaling__.addSubview(r1__root)
		viewsByName["R1__root"] = r1__root
		viewsByName["R1__xScale"] = r1__xScale
		viewsByName["R1__yScale"] = r1__yScale
		viewsByName["R1"] = r1

		let r2__root = HomepagePassthroughView()
		let r2__xScale = HomepagePassthroughView()
		let r2__yScale = HomepagePassthroughView()
		let r2 = UIImageView()
		let imgR2 = UIImage(named:"R2.png", in: bundle, compatibleWith: nil)
		if imgR2 == nil {
			print("** Warning: Could not create image from 'R2.png'")
		}
		r2.image = imgR2
		r2.contentMode = .center
		r2.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		r2__root.layer.position = CGPoint(x:192.178, y:333.667)
		r2__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		r2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		r2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(r2__root)
		r2__root.addSubview(r2__xScale)
		r2__xScale.addSubview(r2__yScale)
		r2__yScale.addSubview(r2)
		__scaling__.addSubview(r2__root)
		viewsByName["R2__root"] = r2__root
		viewsByName["R2__xScale"] = r2__xScale
		viewsByName["R2__yScale"] = r2__yScale
		viewsByName["R2"] = r2

		let s1__root = HomepagePassthroughView()
		let s1__xScale = HomepagePassthroughView()
		let s1__yScale = HomepagePassthroughView()
		let s1 = UIImageView()
		let imgS1 = UIImage(named:"S1.png", in: bundle, compatibleWith: nil)
		if imgS1 == nil {
			print("** Warning: Could not create image from 'S1.png'")
		}
		s1.image = imgS1
		s1.contentMode = .center
		s1.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		s1__root.layer.position = CGPoint(x:241.066, y:332.915)
		s1__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		s1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		s1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(s1__root)
		s1__root.addSubview(s1__xScale)
		s1__xScale.addSubview(s1__yScale)
		s1__yScale.addSubview(s1)
		__scaling__.addSubview(s1__root)
		viewsByName["S1__root"] = s1__root
		viewsByName["S1__xScale"] = s1__xScale
		viewsByName["S1__yScale"] = s1__yScale
		viewsByName["S1"] = s1

		let s2__root = HomepagePassthroughView()
		let s2__xScale = HomepagePassthroughView()
		let s2__yScale = HomepagePassthroughView()
		let s2 = UIImageView()
		let imgS2 = UIImage(named:"S2.png", in: bundle, compatibleWith: nil)
		if imgS2 == nil {
			print("** Warning: Could not create image from 'S2.png'")
		}
		s2.image = imgS2
		s2.contentMode = .center
		s2.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		s2__root.layer.position = CGPoint(x:216.369, y:354.242)
		s2__xScale.transform = CGAffineTransform(scaleX: 0.12, y: 1.00)
		s2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.12)
		s2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(s2__root)
		s2__root.addSubview(s2__xScale)
		s2__xScale.addSubview(s2__yScale)
		s2__yScale.addSubview(s2)
		__scaling__.addSubview(s2__root)
		viewsByName["S2__root"] = s2__root
		viewsByName["S2__xScale"] = s2__xScale
		viewsByName["S2__yScale"] = s2__yScale
		viewsByName["S2"] = s2

		let t1__root = HomepagePassthroughView()
		let t1__xScale = HomepagePassthroughView()
		let t1__yScale = HomepagePassthroughView()
		let t1 = UIImageView()
		let imgT1 = UIImage(named:"T1.png", in: bundle, compatibleWith: nil)
		if imgT1 == nil {
			print("** Warning: Could not create image from 'T1.png'")
		}
		t1.image = imgT1
		t1.contentMode = .center
		t1.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		t1__root.layer.position = CGPoint(x:156.680, y:244.000)
		t1__root.alpha = 0.98
		t1__xScale.transform = CGAffineTransform(scaleX: 0.50, y: 1.00)
		t1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.50)
		t1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(t1__root)
		t1__root.addSubview(t1__xScale)
		t1__xScale.addSubview(t1__yScale)
		t1__yScale.addSubview(t1)
		__scaling__.addSubview(t1__root)
		viewsByName["T1__root"] = t1__root
		viewsByName["T1__xScale"] = t1__xScale
		viewsByName["T1__yScale"] = t1__yScale
		viewsByName["T1"] = t1

		let t2__root = HomepagePassthroughView()
		let t2__xScale = HomepagePassthroughView()
		let t2__yScale = HomepagePassthroughView()
		let t2 = UIImageView()
		let imgT2 = UIImage(named:"T2.png", in: bundle, compatibleWith: nil)
		if imgT2 == nil {
			print("** Warning: Could not create image from 'T2.png'")
		}
		t2.image = imgT2
		t2.contentMode = .center
		t2.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		t2__root.layer.position = CGPoint(x:261.626, y:332.775)
		t2__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		t2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		t2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(t2__root)
		t2__root.addSubview(t2__xScale)
		t2__xScale.addSubview(t2__yScale)
		t2__yScale.addSubview(t2)
		__scaling__.addSubview(t2__root)
		viewsByName["T2__root"] = t2__root
		viewsByName["T2__xScale"] = t2__xScale
		viewsByName["T2__yScale"] = t2__yScale
		viewsByName["T2"] = t2

		let t3__root = HomepagePassthroughView()
		let t3__xScale = HomepagePassthroughView()
		let t3__yScale = HomepagePassthroughView()
		let t3 = UIImageView()
		let imgT3 = UIImage(named:"T3.png", in: bundle, compatibleWith: nil)
		if imgT3 == nil {
			print("** Warning: Could not create image from 'T3.png'")
		}
		t3.image = imgT3
		t3.contentMode = .center
		t3.layer.anchorPoint = CGPoint(x:0.538, y:0.553)
		t3.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		t3__root.layer.position = CGPoint(x:128.164, y:355.336)
		t3__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		t3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		t3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(t3__root)
		t3__root.addSubview(t3__xScale)
		t3__xScale.addSubview(t3__yScale)
		t3__yScale.addSubview(t3)
		__scaling__.addSubview(t3__root)
		viewsByName["T3__root"] = t3__root
		viewsByName["T3__xScale"] = t3__xScale
		viewsByName["T3__yScale"] = t3__yScale
		viewsByName["T3"] = t3

		let u1__root = HomepagePassthroughView()
		let u1__xScale = HomepagePassthroughView()
		let u1__yScale = HomepagePassthroughView()
		let u1 = UIImageView()
		let imgU1 = UIImage(named:"U1.png", in: bundle, compatibleWith: nil)
		if imgU1 == nil {
			print("** Warning: Could not create image from 'U1.png'")
		}
		u1.image = imgU1
		u1.contentMode = .center
		u1.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		u1__root.layer.position = CGPoint(x:169.369, y:355.242)
		u1__root.alpha = 0.99
		u1__xScale.transform = CGAffineTransform(scaleX: 0.12, y: 1.00)
		u1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.12)
		u1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(u1__root)
		u1__root.addSubview(u1__xScale)
		u1__xScale.addSubview(u1__yScale)
		u1__yScale.addSubview(u1)
		__scaling__.addSubview(u1__root)
		viewsByName["U1__root"] = u1__root
		viewsByName["U1__xScale"] = u1__xScale
		viewsByName["U1__yScale"] = u1__yScale
		viewsByName["U1"] = u1

		let v1__root = HomepagePassthroughView()
		let v1__xScale = HomepagePassthroughView()
		let v1__yScale = HomepagePassthroughView()
		let v1 = UIImageView()
		let imgV1 = UIImage(named:"V1.png", in: bundle, compatibleWith: nil)
		if imgV1 == nil {
			print("** Warning: Could not create image from 'V1.png'")
		}
		v1.image = imgV1
		v1.contentMode = .center
		v1.layer.anchorPoint = CGPoint(x:0.473, y:0.513)
		v1.bounds = CGRect(x:0, y:0, width:85.0, height:85.0)
		v1__root.layer.position = CGPoint(x:268.092, y:355.379)
		v1__xScale.transform = CGAffineTransform(scaleX: 0.12, y: 1.00)
		v1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.12)
		v1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(v1__root)
		v1__root.addSubview(v1__xScale)
		v1__xScale.addSubview(v1__yScale)
		v1__yScale.addSubview(v1)
		__scaling__.addSubview(v1__root)
		viewsByName["V1__root"] = v1__root
		viewsByName["V1__xScale"] = v1__xScale
		viewsByName["V1__yScale"] = v1__yScale
		viewsByName["V1"] = v1

		let w1__root = HomepagePassthroughView()
		let w1__xScale = HomepagePassthroughView()
		let w1__yScale = HomepagePassthroughView()
		let w1 = UIImageView()
		let imgW1 = UIImage(named:"W1.png", in: bundle, compatibleWith: nil)
		if imgW1 == nil {
			print("** Warning: Could not create image from 'W1.png'")
		}
		w1.image = imgW1
		w1.contentMode = .center
		w1.bounds = CGRect(x:0, y:0, width:128.0, height:110.0)
		w1__root.layer.position = CGPoint(x:188.000, y:306.191)
		w1__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		w1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		w1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(w1__root)
		w1__root.addSubview(w1__xScale)
		w1__xScale.addSubview(w1__yScale)
		w1__yScale.addSubview(w1)
		__scaling__.addSubview(w1__root)
		viewsByName["W1__root"] = w1__root
		viewsByName["W1__xScale"] = w1__xScale
		viewsByName["W1__yScale"] = w1__yScale
		viewsByName["W1"] = w1

		let x1__root = HomepagePassthroughView()
		let x1__xScale = HomepagePassthroughView()
		let x1__yScale = HomepagePassthroughView()
		let x1 = UIImageView()
		let imgX1 = UIImage(named:"X1.png", in: bundle, compatibleWith: nil)
		if imgX1 == nil {
			print("** Warning: Could not create image from 'X1.png'")
		}
		x1.image = imgX1
		x1.contentMode = .center
		x1.bounds = CGRect(x:0, y:0, width:110.0, height:110.0)
		x1__root.layer.position = CGPoint(x:216.690, y:332.988)
		x1__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		x1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		x1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(x1__root)
		x1__root.addSubview(x1__xScale)
		x1__xScale.addSubview(x1__yScale)
		x1__yScale.addSubview(x1)
		__scaling__.addSubview(x1__root)
		viewsByName["X1__root"] = x1__root
		viewsByName["X1__xScale"] = x1__xScale
		viewsByName["X1__yScale"] = x1__yScale
		viewsByName["X1"] = x1

		let circlefilled__root = HomepagePassthroughView()
		let circlefilled__xScale = HomepagePassthroughView()
		let circlefilled__yScale = HomepagePassthroughView()
		let circlefilled = UIImageView()
		let imgCirclefilled = UIImage(named:"circlefilled.png", in: bundle, compatibleWith: nil)
		if imgCirclefilled == nil {
			print("** Warning: Could not create image from 'circlefilled.png'")
		}
		circlefilled.image = imgCirclefilled
		circlefilled.contentMode = .center
		circlefilled.bounds = CGRect(x:0, y:0, width:266.0, height:236.0)
		circlefilled__root.layer.position = CGPoint(x:184.688, y:39.307)
		circlefilled__xScale.transform = CGAffineTransform(scaleX: 0.25, y: 1.00)
		circlefilled__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.25)
		circlefilled__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(circlefilled__root)
		circlefilled__root.addSubview(circlefilled__xScale)
		circlefilled__xScale.addSubview(circlefilled__yScale)
		circlefilled__yScale.addSubview(circlefilled)
		__scaling__.addSubview(circlefilled__root)
		viewsByName["circlefilled__root"] = circlefilled__root
		viewsByName["circlefilled__xScale"] = circlefilled__xScale
		viewsByName["circlefilled__yScale"] = circlefilled__yScale
		viewsByName["circlefilled"] = circlefilled

		let circlefilledMask__root = HomepagePassthroughView()
		let circlefilledMask__xScale = HomepagePassthroughView()
		let circlefilledMask__yScale = HomepagePassthroughView()
		let circlefilledMask = UIImageView()
		circlefilledMask.image = imgSquare
		circlefilledMask.contentMode = .center
		circlefilledMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.0)
		circlefilledMask__root.layer.position = CGPoint(x:438.738, y:130.492)
		circlefilledMask__xScale.transform = CGAffineTransform(scaleX: 1.47, y: 1.00)
		circlefilledMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.42)
		circlefilledMask__root.transform = CGAffineTransform(rotationAngle: 0.000)
		circlefilled.addSubview(circlefilledMask__root)
		circlefilledMask__root.addSubview(circlefilledMask__xScale)
		circlefilledMask__xScale.addSubview(circlefilledMask__yScale)
		circlefilledMask__yScale.addSubview(circlefilledMask)
		circlefilled.mask = circlefilledMask__root
		viewsByName["circlefilled_mask__root"] = circlefilledMask__root
		viewsByName["circlefilled_mask__xScale"] = circlefilledMask__xScale
		viewsByName["circlefilled_mask__yScale"] = circlefilledMask__yScale
		viewsByName["circlefilled_mask"] = circlefilledMask

		self.viewsByName = viewsByName
	}

	// - MARK: eyechart

	func addEyechartAnimation() {
		addEyechartAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addEyechartAnimation(completion: ((Bool) -> Void)?) {
		addEyechartAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addEyechartAnimation(removedOnCompletion: Bool) {
		addEyechartAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addEyechartAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addEyechartAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addEyechartAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 4.400
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Eyechart")
			self.animationCompletions[layer.animation(forKey: "Eyechart")!] = complete
		}

		let i2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		i2ScaleXAnimation.duration = 4.400
		i2ScaleXAnimation.values = [0.120, 0.120, 0.150, 0.150] as [Float]
		i2ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i2ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i2ScaleXAnimation.beginTime = beginTime
		i2ScaleXAnimation.fillMode = fillMode
		i2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I2__xScale"]?.layer.add(i2ScaleXAnimation, forKey:"eyechart_ScaleX")

		let i2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		i2ScaleYAnimation.duration = 4.400
		i2ScaleYAnimation.values = [0.120, 0.120, 0.150, 0.150] as [Float]
		i2ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i2ScaleYAnimation.beginTime = beginTime
		i2ScaleYAnimation.fillMode = fillMode
		i2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I2__yScale"]?.layer.add(i2ScaleYAnimation, forKey:"eyechart_ScaleY")

		let i2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		i2TranslationXAnimation.duration = 4.400
		i2TranslationXAnimation.values = [0.000, 0.000, -118.027, -118.027] as [Float]
		i2TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i2TranslationXAnimation.beginTime = beginTime
		i2TranslationXAnimation.fillMode = fillMode
		i2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I2__root"]?.layer.add(i2TranslationXAnimation, forKey:"eyechart_TranslationX")

		let i2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		i2TranslationYAnimation.duration = 4.400
		i2TranslationYAnimation.values = [0.000, 0.000, -220.945, -220.945] as [Float]
		i2TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i2TranslationYAnimation.beginTime = beginTime
		i2TranslationYAnimation.fillMode = fillMode
		i2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I2__root"]?.layer.add(i2TranslationYAnimation, forKey:"eyechart_TranslationY")

		let r1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		r1ScaleXAnimation.duration = 4.400
		r1ScaleXAnimation.values = [0.300, 0.300, 0.200, 0.200] as [Float]
		r1ScaleXAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		r1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		r1ScaleXAnimation.beginTime = beginTime
		r1ScaleXAnimation.fillMode = fillMode
		r1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R1__xScale"]?.layer.add(r1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let r1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		r1ScaleYAnimation.duration = 4.400
		r1ScaleYAnimation.values = [0.300, 0.300, 0.200, 0.200] as [Float]
		r1ScaleYAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		r1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		r1ScaleYAnimation.beginTime = beginTime
		r1ScaleYAnimation.fillMode = fillMode
		r1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R1__yScale"]?.layer.add(r1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let r1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		r1TranslationXAnimation.duration = 4.400
		r1TranslationXAnimation.values = [0.000, 0.000, -66.395, -66.395] as [Float]
		r1TranslationXAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		r1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		r1TranslationXAnimation.beginTime = beginTime
		r1TranslationXAnimation.fillMode = fillMode
		r1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R1__root"]?.layer.add(r1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let r1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		r1TranslationYAnimation.duration = 4.400
		r1TranslationYAnimation.values = [0.000, 0.000, -141.351, -142.351, -142.351] as [Float]
		r1TranslationYAnimation.keyTimes = [0.000, 0.227, 0.284, 0.455, 1.000] as [NSNumber]
		r1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		r1TranslationYAnimation.beginTime = beginTime
		r1TranslationYAnimation.fillMode = fillMode
		r1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R1__root"]?.layer.add(r1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let s1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		s1TranslationXAnimation.duration = 4.400
		s1TranslationXAnimation.values = [0.000, 0.000, -115.425, -115.425] as [Float]
		s1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		s1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		s1TranslationXAnimation.beginTime = beginTime
		s1TranslationXAnimation.fillMode = fillMode
		s1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["S1__root"]?.layer.add(s1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let s1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		s1TranslationYAnimation.duration = 4.400
		s1TranslationYAnimation.values = [0.000, 0.000, -198.853, -198.853] as [Float]
		s1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		s1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		s1TranslationYAnimation.beginTime = beginTime
		s1TranslationYAnimation.fillMode = fillMode
		s1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["S1__root"]?.layer.add(s1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let a1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		a1ZPositionAnimation.duration = 4.400
		a1ZPositionAnimation.values = [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000] as [Float]
		a1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		a1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		a1ZPositionAnimation.beginTime = beginTime
		a1ZPositionAnimation.fillMode = fillMode
		a1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["A1"]?.layer.add(a1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let b1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		b1ZPositionAnimation.duration = 4.400
		b1ZPositionAnimation.values = [1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000] as [Float]
		b1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		b1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		b1ZPositionAnimation.beginTime = beginTime
		b1ZPositionAnimation.fillMode = fillMode
		b1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["B1"]?.layer.add(b1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let boxerwachlerHeadZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		boxerwachlerHeadZPositionAnimation.duration = 4.400
		boxerwachlerHeadZPositionAnimation.values = [2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000] as [Float]
		boxerwachlerHeadZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		boxerwachlerHeadZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		boxerwachlerHeadZPositionAnimation.beginTime = beginTime
		boxerwachlerHeadZPositionAnimation.fillMode = fillMode
		boxerwachlerHeadZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["boxerwachler-head"]?.layer.add(boxerwachlerHeadZPositionAnimation, forKey:"eyechart_ZPosition")

		let c1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		c1ZPositionAnimation.duration = 4.400
		c1ZPositionAnimation.values = [3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000] as [Float]
		c1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		c1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		c1ZPositionAnimation.beginTime = beginTime
		c1ZPositionAnimation.fillMode = fillMode
		c1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["C1"]?.layer.add(c1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let e1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		e1ZPositionAnimation.duration = 4.400
		e1ZPositionAnimation.values = [4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000, 4.000] as [Float]
		e1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		e1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		e1ZPositionAnimation.beginTime = beginTime
		e1ZPositionAnimation.fillMode = fillMode
		e1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E1"]?.layer.add(e1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let e2ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		e2ZPositionAnimation.duration = 4.400
		e2ZPositionAnimation.values = [5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000] as [Float]
		e2ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		e2ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		e2ZPositionAnimation.beginTime = beginTime
		e2ZPositionAnimation.fillMode = fillMode
		e2ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E2"]?.layer.add(e2ZPositionAnimation, forKey:"eyechart_ZPosition")

		let e3ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		e3ZPositionAnimation.duration = 4.400
		e3ZPositionAnimation.values = [6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000, 6.000] as [Float]
		e3ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		e3ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		e3ZPositionAnimation.beginTime = beginTime
		e3ZPositionAnimation.fillMode = fillMode
		e3ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E3"]?.layer.add(e3ZPositionAnimation, forKey:"eyechart_ZPosition")

		let h1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		h1ZPositionAnimation.duration = 4.400
		h1ZPositionAnimation.values = [7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000] as [Float]
		h1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		h1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		h1ZPositionAnimation.beginTime = beginTime
		h1ZPositionAnimation.fillMode = fillMode
		h1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["H1"]?.layer.add(h1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let i1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		i1ZPositionAnimation.duration = 4.400
		i1ZPositionAnimation.values = [8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000, 8.000] as [Float]
		i1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		i1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		i1ZPositionAnimation.beginTime = beginTime
		i1ZPositionAnimation.fillMode = fillMode
		i1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I1"]?.layer.add(i1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let i2ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		i2ZPositionAnimation.duration = 4.400
		i2ZPositionAnimation.values = [9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000, 9.000] as [Float]
		i2ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		i2ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		i2ZPositionAnimation.beginTime = beginTime
		i2ZPositionAnimation.fillMode = fillMode
		i2ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I2"]?.layer.add(i2ZPositionAnimation, forKey:"eyechart_ZPosition")

		let i3ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		i3ZPositionAnimation.duration = 4.400
		i3ZPositionAnimation.values = [10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000, 10.000] as [Float]
		i3ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		i3ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		i3ZPositionAnimation.beginTime = beginTime
		i3ZPositionAnimation.fillMode = fillMode
		i3ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I3"]?.layer.add(i3ZPositionAnimation, forKey:"eyechart_ZPosition")

		let i4ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		i4ZPositionAnimation.duration = 4.400
		i4ZPositionAnimation.values = [11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000, 11.000] as [Float]
		i4ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		i4ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		i4ZPositionAnimation.beginTime = beginTime
		i4ZPositionAnimation.fillMode = fillMode
		i4ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I4"]?.layer.add(i4ZPositionAnimation, forKey:"eyechart_ZPosition")

		let l1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		l1ZPositionAnimation.duration = 4.400
		l1ZPositionAnimation.values = [12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000, 12.000] as [Float]
		l1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		l1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		l1ZPositionAnimation.beginTime = beginTime
		l1ZPositionAnimation.fillMode = fillMode
		l1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["L1"]?.layer.add(l1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let n1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		n1ZPositionAnimation.duration = 4.400
		n1ZPositionAnimation.values = [13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000, 13.000] as [Float]
		n1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		n1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		n1ZPositionAnimation.beginTime = beginTime
		n1ZPositionAnimation.fillMode = fillMode
		n1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N1"]?.layer.add(n1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let n2ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		n2ZPositionAnimation.duration = 4.400
		n2ZPositionAnimation.values = [14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000, 14.000] as [Float]
		n2ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		n2ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		n2ZPositionAnimation.beginTime = beginTime
		n2ZPositionAnimation.fillMode = fillMode
		n2ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N2"]?.layer.add(n2ZPositionAnimation, forKey:"eyechart_ZPosition")

		let o1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		o1ZPositionAnimation.duration = 4.400
		o1ZPositionAnimation.values = [15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000, 15.000] as [Float]
		o1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		o1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		o1ZPositionAnimation.beginTime = beginTime
		o1ZPositionAnimation.fillMode = fillMode
		o1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["O1"]?.layer.add(o1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let o2ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		o2ZPositionAnimation.duration = 4.400
		o2ZPositionAnimation.values = [16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000, 16.000] as [Float]
		o2ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		o2ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		o2ZPositionAnimation.beginTime = beginTime
		o2ZPositionAnimation.fillMode = fillMode
		o2ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["O2"]?.layer.add(o2ZPositionAnimation, forKey:"eyechart_ZPosition")

		let r1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		r1ZPositionAnimation.duration = 4.400
		r1ZPositionAnimation.values = [17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000, 17.000] as [Float]
		r1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		r1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		r1ZPositionAnimation.beginTime = beginTime
		r1ZPositionAnimation.fillMode = fillMode
		r1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R1"]?.layer.add(r1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let r2ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		r2ZPositionAnimation.duration = 4.400
		r2ZPositionAnimation.values = [18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000, 18.000] as [Float]
		r2ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		r2ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		r2ZPositionAnimation.beginTime = beginTime
		r2ZPositionAnimation.fillMode = fillMode
		r2ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R2"]?.layer.add(r2ZPositionAnimation, forKey:"eyechart_ZPosition")

		let s1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		s1ZPositionAnimation.duration = 4.400
		s1ZPositionAnimation.values = [19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000, 19.000] as [Float]
		s1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		s1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		s1ZPositionAnimation.beginTime = beginTime
		s1ZPositionAnimation.fillMode = fillMode
		s1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["S1"]?.layer.add(s1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let s2ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		s2ZPositionAnimation.duration = 4.400
		s2ZPositionAnimation.values = [20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000, 20.000] as [Float]
		s2ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		s2ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		s2ZPositionAnimation.beginTime = beginTime
		s2ZPositionAnimation.fillMode = fillMode
		s2ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["S2"]?.layer.add(s2ZPositionAnimation, forKey:"eyechart_ZPosition")

		let t1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		t1ZPositionAnimation.duration = 4.400
		t1ZPositionAnimation.values = [21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000, 21.000] as [Float]
		t1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		t1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		t1ZPositionAnimation.beginTime = beginTime
		t1ZPositionAnimation.fillMode = fillMode
		t1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T1"]?.layer.add(t1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let t2ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		t2ZPositionAnimation.duration = 4.400
		t2ZPositionAnimation.values = [22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000, 22.000] as [Float]
		t2ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		t2ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		t2ZPositionAnimation.beginTime = beginTime
		t2ZPositionAnimation.fillMode = fillMode
		t2ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T2"]?.layer.add(t2ZPositionAnimation, forKey:"eyechart_ZPosition")

		let t3ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		t3ZPositionAnimation.duration = 4.400
		t3ZPositionAnimation.values = [23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000, 23.000] as [Float]
		t3ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		t3ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		t3ZPositionAnimation.beginTime = beginTime
		t3ZPositionAnimation.fillMode = fillMode
		t3ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T3"]?.layer.add(t3ZPositionAnimation, forKey:"eyechart_ZPosition")

		let u1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		u1ZPositionAnimation.duration = 4.400
		u1ZPositionAnimation.values = [24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000, 24.000] as [Float]
		u1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		u1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		u1ZPositionAnimation.beginTime = beginTime
		u1ZPositionAnimation.fillMode = fillMode
		u1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["U1"]?.layer.add(u1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let v1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		v1ZPositionAnimation.duration = 4.400
		v1ZPositionAnimation.values = [25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000, 25.000] as [Float]
		v1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		v1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		v1ZPositionAnimation.beginTime = beginTime
		v1ZPositionAnimation.fillMode = fillMode
		v1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["V1"]?.layer.add(v1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let w1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		w1ZPositionAnimation.duration = 4.400
		w1ZPositionAnimation.values = [26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000, 26.000] as [Float]
		w1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		w1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		w1ZPositionAnimation.beginTime = beginTime
		w1ZPositionAnimation.fillMode = fillMode
		w1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["W1"]?.layer.add(w1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let x1ZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		x1ZPositionAnimation.duration = 4.400
		x1ZPositionAnimation.values = [27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000, 27.000] as [Float]
		x1ZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		x1ZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		x1ZPositionAnimation.beginTime = beginTime
		x1ZPositionAnimation.fillMode = fillMode
		x1ZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["X1"]?.layer.add(x1ZPositionAnimation, forKey:"eyechart_ZPosition")

		let circlefilledZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		circlefilledZPositionAnimation.duration = 4.400
		circlefilledZPositionAnimation.values = [28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000, 28.000] as [Float]
		circlefilledZPositionAnimation.keyTimes = [0.000, 0.011, 0.011, 0.227, 0.227, 0.284, 0.284, 0.454, 0.455, 0.477, 0.477, 0.489, 0.489, 0.500, 0.500, 0.648, 0.648, 0.693, 0.693, 0.716, 0.716, 0.761, 0.761, 0.773, 0.773, 0.852, 0.852, 0.932, 0.932, 1.000, 1.000] as [NSNumber]
		circlefilledZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		circlefilledZPositionAnimation.beginTime = beginTime
		circlefilledZPositionAnimation.fillMode = fillMode
		circlefilledZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circlefilled"]?.layer.add(circlefilledZPositionAnimation, forKey:"eyechart_ZPosition")

		let e1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		e1ScaleXAnimation.duration = 4.400
		e1ScaleXAnimation.values = [0.500, 0.500, 0.200, 0.200] as [Float]
		e1ScaleXAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		e1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e1ScaleXAnimation.beginTime = beginTime
		e1ScaleXAnimation.fillMode = fillMode
		e1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E1__xScale"]?.layer.add(e1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let e1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		e1ScaleYAnimation.duration = 4.400
		e1ScaleYAnimation.values = [0.500, 0.500, 0.200, 0.200] as [Float]
		e1ScaleYAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		e1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e1ScaleYAnimation.beginTime = beginTime
		e1ScaleYAnimation.fillMode = fillMode
		e1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E1__yScale"]?.layer.add(e1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let e1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		e1TranslationXAnimation.duration = 4.400
		e1TranslationXAnimation.values = [0.000, 0.000, -59.246, -59.246] as [Float]
		e1TranslationXAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		e1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e1TranslationXAnimation.beginTime = beginTime
		e1TranslationXAnimation.fillMode = fillMode
		e1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E1__root"]?.layer.add(e1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let e1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		e1TranslationYAnimation.duration = 4.400
		e1TranslationYAnimation.values = [0.000, 0.000, -91.317, -91.317] as [Float]
		e1TranslationYAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		e1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e1TranslationYAnimation.beginTime = beginTime
		e1TranslationYAnimation.fillMode = fillMode
		e1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E1__root"]?.layer.add(e1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let i3ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		i3ScaleXAnimation.duration = 4.400
		i3ScaleXAnimation.values = [0.280, 0.280, 0.150, 0.150] as [Float]
		i3ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i3ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i3ScaleXAnimation.beginTime = beginTime
		i3ScaleXAnimation.fillMode = fillMode
		i3ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I3__xScale"]?.layer.add(i3ScaleXAnimation, forKey:"eyechart_ScaleX")

		let i3ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		i3ScaleYAnimation.duration = 4.400
		i3ScaleYAnimation.values = [0.280, 0.280, 0.150, 0.150] as [Float]
		i3ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i3ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i3ScaleYAnimation.beginTime = beginTime
		i3ScaleYAnimation.fillMode = fillMode
		i3ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I3__yScale"]?.layer.add(i3ScaleYAnimation, forKey:"eyechart_ScaleY")

		let i3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		i3TranslationXAnimation.duration = 4.400
		i3TranslationXAnimation.values = [0.000, 0.000, -121.712, -121.712] as [Float]
		i3TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i3TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i3TranslationXAnimation.beginTime = beginTime
		i3TranslationXAnimation.fillMode = fillMode
		i3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I3__root"]?.layer.add(i3TranslationXAnimation, forKey:"eyechart_TranslationX")

		let i3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		i3TranslationYAnimation.duration = 4.400
		i3TranslationYAnimation.values = [0.000, 0.000, -145.620, -145.620] as [Float]
		i3TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i3TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i3TranslationYAnimation.beginTime = beginTime
		i3TranslationYAnimation.fillMode = fillMode
		i3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I3__root"]?.layer.add(i3TranslationYAnimation, forKey:"eyechart_TranslationY")

		let r2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		r2ScaleXAnimation.duration = 4.400
		r2ScaleXAnimation.values = [0.100, 0.100, 0.200, 0.200] as [Float]
		r2ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		r2ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		r2ScaleXAnimation.beginTime = beginTime
		r2ScaleXAnimation.fillMode = fillMode
		r2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R2__xScale"]?.layer.add(r2ScaleXAnimation, forKey:"eyechart_ScaleX")

		let r2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		r2ScaleYAnimation.duration = 4.400
		r2ScaleYAnimation.values = [0.100, 0.100, 0.200, 0.200] as [Float]
		r2ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		r2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		r2ScaleYAnimation.beginTime = beginTime
		r2ScaleYAnimation.fillMode = fillMode
		r2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R2__yScale"]?.layer.add(r2ScaleYAnimation, forKey:"eyechart_ScaleY")

		let r2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		r2TranslationXAnimation.duration = 4.400
		r2TranslationXAnimation.values = [0.000, 0.000, 172.844, 172.844] as [Float]
		r2TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		r2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		r2TranslationXAnimation.beginTime = beginTime
		r2TranslationXAnimation.fillMode = fillMode
		r2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R2__root"]?.layer.add(r2TranslationXAnimation, forKey:"eyechart_TranslationX")

		let r2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		r2TranslationYAnimation.duration = 4.400
		r2TranslationYAnimation.values = [0.000, 0.000, -233.002, -233.002] as [Float]
		r2TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		r2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		r2TranslationYAnimation.beginTime = beginTime
		r2TranslationYAnimation.fillMode = fillMode
		r2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["R2__root"]?.layer.add(r2TranslationYAnimation, forKey:"eyechart_TranslationY")

		let i1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		i1TranslationXAnimation.duration = 4.400
		i1TranslationXAnimation.values = [0.000, 0.000, 25.211, 25.211] as [Float]
		i1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i1TranslationXAnimation.beginTime = beginTime
		i1TranslationXAnimation.fillMode = fillMode
		i1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I1__root"]?.layer.add(i1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let i1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		i1TranslationYAnimation.duration = 4.400
		i1TranslationYAnimation.values = [0.000, 0.000, -199.291, -199.291] as [Float]
		i1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i1TranslationYAnimation.beginTime = beginTime
		i1TranslationYAnimation.fillMode = fillMode
		i1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I1__root"]?.layer.add(i1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let circlefilledMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		circlefilledMaskTranslationXAnimation.duration = 4.400
		circlefilledMaskTranslationXAnimation.values = [0.000, 0.000, -304.000, -304.000] as [Float]
		circlefilledMaskTranslationXAnimation.keyTimes = [0.000, 0.455, 0.477, 1.000] as [NSNumber]
		circlefilledMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		circlefilledMaskTranslationXAnimation.beginTime = beginTime
		circlefilledMaskTranslationXAnimation.fillMode = fillMode
		circlefilledMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["circlefilled_mask__root"]?.layer.add(circlefilledMaskTranslationXAnimation, forKey:"eyechart_TranslationX")

		let t1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		t1ScaleXAnimation.duration = 4.400
		t1ScaleXAnimation.values = [0.500, 0.500, 0.150, 0.150] as [Float]
		t1ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t1ScaleXAnimation.beginTime = beginTime
		t1ScaleXAnimation.fillMode = fillMode
		t1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T1__xScale"]?.layer.add(t1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let t1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		t1ScaleYAnimation.duration = 4.400
		t1ScaleYAnimation.values = [0.500, 0.500, 0.150, 0.150] as [Float]
		t1ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t1ScaleYAnimation.beginTime = beginTime
		t1ScaleYAnimation.fillMode = fillMode
		t1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T1__yScale"]?.layer.add(t1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let t1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		t1TranslationXAnimation.duration = 4.400
		t1TranslationXAnimation.values = [0.000, 0.000, 75.956, 75.956] as [Float]
		t1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t1TranslationXAnimation.beginTime = beginTime
		t1TranslationXAnimation.fillMode = fillMode
		t1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T1__root"]?.layer.add(t1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let t1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		t1TranslationYAnimation.duration = 4.400
		t1TranslationYAnimation.values = [0.000, 0.000, -109.877, -109.877] as [Float]
		t1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t1TranslationYAnimation.beginTime = beginTime
		t1TranslationYAnimation.fillMode = fillMode
		t1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T1__root"]?.layer.add(t1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let c1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		c1TranslationXAnimation.duration = 4.400
		c1TranslationXAnimation.values = [0.000, 0.000, 116.031, 116.031] as [Float]
		c1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		c1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		c1TranslationXAnimation.beginTime = beginTime
		c1TranslationXAnimation.fillMode = fillMode
		c1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["C1__root"]?.layer.add(c1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let c1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		c1TranslationYAnimation.duration = 4.400
		c1TranslationYAnimation.values = [0.000, 0.000, -178.708, -178.708] as [Float]
		c1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		c1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		c1TranslationYAnimation.beginTime = beginTime
		c1TranslationYAnimation.fillMode = fillMode
		c1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["C1__root"]?.layer.add(c1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let o1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		o1TranslationXAnimation.duration = 4.400
		o1TranslationXAnimation.values = [0.000, 0.000, -118.292, -118.292] as [Float]
		o1TranslationXAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		o1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		o1TranslationXAnimation.beginTime = beginTime
		o1TranslationXAnimation.fillMode = fillMode
		o1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["O1__root"]?.layer.add(o1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let o1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		o1TranslationYAnimation.duration = 4.400
		o1TranslationYAnimation.values = [0.000, 0.000, -176.855, -176.855] as [Float]
		o1TranslationYAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		o1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		o1TranslationYAnimation.beginTime = beginTime
		o1TranslationYAnimation.fillMode = fillMode
		o1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["O1__root"]?.layer.add(o1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let w1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		w1ScaleXAnimation.duration = 4.400
		w1ScaleXAnimation.values = [0.150, 0.150, 0.200, 0.200] as [Float]
		w1ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		w1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		w1ScaleXAnimation.beginTime = beginTime
		w1ScaleXAnimation.fillMode = fillMode
		w1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["W1__xScale"]?.layer.add(w1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let w1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		w1ScaleYAnimation.duration = 4.400
		w1ScaleYAnimation.values = [0.150, 0.150, 0.200, 0.200] as [Float]
		w1ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		w1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		w1ScaleYAnimation.beginTime = beginTime
		w1ScaleYAnimation.fillMode = fillMode
		w1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["W1__yScale"]?.layer.add(w1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let w1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		w1TranslationXAnimation.duration = 4.400
		w1TranslationXAnimation.values = [0.000, 0.000, 0.888, 0.888] as [Float]
		w1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		w1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		w1TranslationXAnimation.beginTime = beginTime
		w1TranslationXAnimation.fillMode = fillMode
		w1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["W1__root"]?.layer.add(w1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let w1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		w1TranslationYAnimation.duration = 4.400
		w1TranslationYAnimation.values = [0.000, 0.000, -205.685, -205.685] as [Float]
		w1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		w1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		w1TranslationYAnimation.beginTime = beginTime
		w1TranslationYAnimation.fillMode = fillMode
		w1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["W1__root"]?.layer.add(w1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let n1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		n1ScaleXAnimation.duration = 4.400
		n1ScaleXAnimation.values = [0.200, 0.200, 0.150, 0.150] as [Float]
		n1ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		n1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		n1ScaleXAnimation.beginTime = beginTime
		n1ScaleXAnimation.fillMode = fillMode
		n1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N1__xScale"]?.layer.add(n1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let n1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		n1ScaleYAnimation.duration = 4.400
		n1ScaleYAnimation.values = [0.200, 0.200, 0.150, 0.150] as [Float]
		n1ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		n1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		n1ScaleYAnimation.beginTime = beginTime
		n1ScaleYAnimation.fillMode = fillMode
		n1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N1__yScale"]?.layer.add(n1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let n1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		n1TranslationXAnimation.duration = 4.400
		n1TranslationXAnimation.values = [0.000, 0.000, -55.728, -55.728] as [Float]
		n1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		n1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		n1TranslationXAnimation.beginTime = beginTime
		n1TranslationXAnimation.fillMode = fillMode
		n1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N1__root"]?.layer.add(n1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let n1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		n1TranslationYAnimation.duration = 4.400
		n1TranslationYAnimation.values = [0.000, 0.000, -172.400, -172.400] as [Float]
		n1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		n1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		n1TranslationYAnimation.beginTime = beginTime
		n1TranslationYAnimation.fillMode = fillMode
		n1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N1__root"]?.layer.add(n1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let l1OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		l1OpacityAnimation.duration = 4.400
		l1OpacityAnimation.values = [0.970, 0.970, 0.980, 0.980] as [Float]
		l1OpacityAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		l1OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		l1OpacityAnimation.beginTime = beginTime
		l1OpacityAnimation.fillMode = fillMode
		l1OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["L1__root"]?.layer.add(l1OpacityAnimation, forKey:"eyechart_Opacity")

		let l1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		l1ScaleXAnimation.duration = 4.400
		l1ScaleXAnimation.values = [0.100, 0.100, 0.200, 0.200] as [Float]
		l1ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		l1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		l1ScaleXAnimation.beginTime = beginTime
		l1ScaleXAnimation.fillMode = fillMode
		l1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["L1__xScale"]?.layer.add(l1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let l1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		l1ScaleYAnimation.duration = 4.400
		l1ScaleYAnimation.values = [0.100, 0.100, 0.200, 0.200] as [Float]
		l1ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		l1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		l1ScaleYAnimation.beginTime = beginTime
		l1ScaleYAnimation.fillMode = fillMode
		l1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["L1__yScale"]?.layer.add(l1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let l1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		l1TranslationXAnimation.duration = 4.400
		l1TranslationXAnimation.values = [0.000, 0.000, 197.163, 197.163] as [Float]
		l1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		l1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		l1TranslationXAnimation.beginTime = beginTime
		l1TranslationXAnimation.fillMode = fillMode
		l1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["L1__root"]?.layer.add(l1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let l1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		l1TranslationYAnimation.duration = 4.400
		l1TranslationYAnimation.values = [0.000, 0.000, -233.379, -233.379] as [Float]
		l1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		l1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		l1TranslationYAnimation.beginTime = beginTime
		l1TranslationYAnimation.fillMode = fillMode
		l1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["L1__root"]?.layer.add(l1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let s2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		s2ScaleXAnimation.duration = 4.400
		s2ScaleXAnimation.values = [0.120, 0.120, 0.150, 0.150] as [Float]
		s2ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		s2ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		s2ScaleXAnimation.beginTime = beginTime
		s2ScaleXAnimation.fillMode = fillMode
		s2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["S2__xScale"]?.layer.add(s2ScaleXAnimation, forKey:"eyechart_ScaleX")

		let s2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		s2ScaleYAnimation.duration = 4.400
		s2ScaleYAnimation.values = [0.120, 0.120, 0.150, 0.120, 0.120, 0.150, 0.150, 0.150] as [Float]
		s2ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 0.653, 0.773, 0.852, 0.932, 1.000] as [NSNumber]
		s2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		s2ScaleYAnimation.beginTime = beginTime
		s2ScaleYAnimation.fillMode = fillMode
		s2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["S2__yScale"]?.layer.add(s2ScaleYAnimation, forKey:"eyechart_ScaleY")

		let s2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		s2TranslationXAnimation.duration = 4.400
		s2TranslationXAnimation.values = [0.000, 0.000, 2.723, 2.723] as [Float]
		s2TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		s2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		s2TranslationXAnimation.beginTime = beginTime
		s2TranslationXAnimation.fillMode = fillMode
		s2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["S2__root"]?.layer.add(s2TranslationXAnimation, forKey:"eyechart_TranslationX")

		let s2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		s2TranslationYAnimation.duration = 4.400
		s2TranslationYAnimation.values = [0.000, 0.000, -220.519, -220.519] as [Float]
		s2TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		s2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		s2TranslationYAnimation.beginTime = beginTime
		s2TranslationYAnimation.fillMode = fillMode
		s2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["S2__root"]?.layer.add(s2TranslationYAnimation, forKey:"eyechart_TranslationY")

		let e3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		e3TranslationXAnimation.duration = 4.400
		e3TranslationXAnimation.values = [0.000, 0.000, 164.000, 164.000] as [Float]
		e3TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		e3TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e3TranslationXAnimation.beginTime = beginTime
		e3TranslationXAnimation.fillMode = fillMode
		e3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E3__root"]?.layer.add(e3TranslationXAnimation, forKey:"eyechart_TranslationX")

		let e3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		e3TranslationYAnimation.duration = 4.400
		e3TranslationYAnimation.values = [0.000, 0.000, -199.000, -199.000] as [Float]
		e3TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		e3TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e3TranslationYAnimation.beginTime = beginTime
		e3TranslationYAnimation.fillMode = fillMode
		e3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E3__root"]?.layer.add(e3TranslationYAnimation, forKey:"eyechart_TranslationY")

		let o2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		o2ScaleXAnimation.duration = 4.400
		o2ScaleXAnimation.values = [0.100, 0.100, 0.150, 0.150] as [Float]
		o2ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		o2ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		o2ScaleXAnimation.beginTime = beginTime
		o2ScaleXAnimation.fillMode = fillMode
		o2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["O2__xScale"]?.layer.add(o2ScaleXAnimation, forKey:"eyechart_ScaleX")

		let o2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		o2ScaleYAnimation.duration = 4.400
		o2ScaleYAnimation.values = [0.100, 0.100, 0.150, 0.150] as [Float]
		o2ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		o2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		o2ScaleYAnimation.beginTime = beginTime
		o2ScaleYAnimation.fillMode = fillMode
		o2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["O2__yScale"]?.layer.add(o2ScaleYAnimation, forKey:"eyechart_ScaleY")

		let o2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		o2TranslationXAnimation.duration = 4.400
		o2TranslationXAnimation.values = [0.000, 0.000, 2.264, 2.264] as [Float]
		o2TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		o2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		o2TranslationXAnimation.beginTime = beginTime
		o2TranslationXAnimation.fillMode = fillMode
		o2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["O2__root"]?.layer.add(o2TranslationXAnimation, forKey:"eyechart_TranslationX")

		let o2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		o2TranslationYAnimation.duration = 4.400
		o2TranslationYAnimation.values = [0.000, 0.000, -220.852, -220.852] as [Float]
		o2TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		o2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		o2TranslationYAnimation.beginTime = beginTime
		o2TranslationYAnimation.fillMode = fillMode
		o2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["O2__root"]?.layer.add(o2TranslationYAnimation, forKey:"eyechart_TranslationY")

		let x1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		x1ScaleXAnimation.duration = 4.400
		x1ScaleXAnimation.values = [0.100, 0.100, 0.200, 0.200] as [Float]
		x1ScaleXAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		x1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		x1ScaleXAnimation.beginTime = beginTime
		x1ScaleXAnimation.fillMode = fillMode
		x1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["X1__xScale"]?.layer.add(x1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let x1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		x1ScaleYAnimation.duration = 4.400
		x1ScaleYAnimation.values = [0.100, 0.100, 0.200, 0.200] as [Float]
		x1ScaleYAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		x1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		x1ScaleYAnimation.beginTime = beginTime
		x1ScaleYAnimation.fillMode = fillMode
		x1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["X1__yScale"]?.layer.add(x1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let x1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		x1TranslationXAnimation.duration = 4.400
		x1TranslationXAnimation.values = [0.000, 0.000, -120.123, -120.123] as [Float]
		x1TranslationXAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		x1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		x1TranslationXAnimation.beginTime = beginTime
		x1TranslationXAnimation.fillMode = fillMode
		x1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["X1__root"]?.layer.add(x1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let x1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		x1TranslationYAnimation.duration = 4.400
		x1TranslationYAnimation.values = [0.000, 0.000, -231.862, -231.862] as [Float]
		x1TranslationYAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		x1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		x1TranslationYAnimation.beginTime = beginTime
		x1TranslationYAnimation.fillMode = fillMode
		x1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["X1__root"]?.layer.add(x1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let t3ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		t3ScaleXAnimation.duration = 4.400
		t3ScaleXAnimation.values = [0.100, 0.100, 0.150, 0.150] as [Float]
		t3ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t3ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t3ScaleXAnimation.beginTime = beginTime
		t3ScaleXAnimation.fillMode = fillMode
		t3ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T3__xScale"]?.layer.add(t3ScaleXAnimation, forKey:"eyechart_ScaleX")

		let t3ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		t3ScaleYAnimation.duration = 4.400
		t3ScaleYAnimation.values = [0.100, 0.100, 0.150, 0.150] as [Float]
		t3ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t3ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t3ScaleYAnimation.beginTime = beginTime
		t3ScaleYAnimation.fillMode = fillMode
		t3ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T3__yScale"]?.layer.add(t3ScaleYAnimation, forKey:"eyechart_ScaleY")

		let t3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		t3TranslationXAnimation.duration = 4.400
		t3TranslationXAnimation.values = [0.000, 0.000, 160.000, 160.000] as [Float]
		t3TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t3TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t3TranslationXAnimation.beginTime = beginTime
		t3TranslationXAnimation.fillMode = fillMode
		t3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T3__root"]?.layer.add(t3TranslationXAnimation, forKey:"eyechart_TranslationX")

		let t3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		t3TranslationYAnimation.duration = 4.400
		t3TranslationYAnimation.values = [0.000, 0.000, -220.000, -220.000] as [Float]
		t3TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t3TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t3TranslationYAnimation.beginTime = beginTime
		t3TranslationYAnimation.fillMode = fillMode
		t3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T3__root"]?.layer.add(t3TranslationYAnimation, forKey:"eyechart_TranslationY")

		let a1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		a1ScaleXAnimation.duration = 4.400
		a1ScaleXAnimation.values = [0.150, 0.150, 0.200, 0.200] as [Float]
		a1ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		a1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		a1ScaleXAnimation.beginTime = beginTime
		a1ScaleXAnimation.fillMode = fillMode
		a1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["A1__xScale"]?.layer.add(a1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let a1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		a1ScaleYAnimation.duration = 4.400
		a1ScaleYAnimation.values = [0.150, 0.150, 0.200, 0.200] as [Float]
		a1ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		a1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		a1ScaleYAnimation.beginTime = beginTime
		a1ScaleYAnimation.fillMode = fillMode
		a1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["A1__yScale"]?.layer.add(a1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let a1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		a1TranslationXAnimation.duration = 4.400
		a1TranslationXAnimation.values = [0.000, 0.000, 102.071, 102.071] as [Float]
		a1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		a1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		a1TranslationXAnimation.beginTime = beginTime
		a1TranslationXAnimation.fillMode = fillMode
		a1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["A1__root"]?.layer.add(a1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let a1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		a1TranslationYAnimation.duration = 4.400
		a1TranslationYAnimation.values = [0.000, 0.000, -205.743, -205.743] as [Float]
		a1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		a1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		a1TranslationYAnimation.beginTime = beginTime
		a1TranslationYAnimation.fillMode = fillMode
		a1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["A1__root"]?.layer.add(a1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let t2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		t2TranslationXAnimation.duration = 4.400
		t2TranslationXAnimation.values = [0.000, 0.000, -4.786, -4.786] as [Float]
		t2TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t2TranslationXAnimation.beginTime = beginTime
		t2TranslationXAnimation.fillMode = fillMode
		t2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T2__root"]?.layer.add(t2TranslationXAnimation, forKey:"eyechart_TranslationX")

		let t2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		t2TranslationYAnimation.duration = 4.400
		t2TranslationYAnimation.values = [0.000, 0.000, -198.581, -198.581] as [Float]
		t2TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		t2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		t2TranslationYAnimation.beginTime = beginTime
		t2TranslationYAnimation.fillMode = fillMode
		t2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["T2__root"]?.layer.add(t2TranslationYAnimation, forKey:"eyechart_TranslationY")

		let u1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		u1ScaleXAnimation.duration = 4.400
		u1ScaleXAnimation.values = [0.120, 0.120, 0.150, 0.150] as [Float]
		u1ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		u1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		u1ScaleXAnimation.beginTime = beginTime
		u1ScaleXAnimation.fillMode = fillMode
		u1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["U1__xScale"]?.layer.add(u1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let u1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		u1ScaleYAnimation.duration = 4.400
		u1ScaleYAnimation.values = [0.120, 0.120, 0.150, 0.150] as [Float]
		u1ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		u1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		u1ScaleYAnimation.beginTime = beginTime
		u1ScaleYAnimation.fillMode = fillMode
		u1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["U1__yScale"]?.layer.add(u1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let u1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		u1TranslationXAnimation.duration = 4.400
		u1TranslationXAnimation.values = [0.000, 0.000, 102.388, 102.388] as [Float]
		u1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		u1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		u1TranslationXAnimation.beginTime = beginTime
		u1TranslationXAnimation.fillMode = fillMode
		u1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["U1__root"]?.layer.add(u1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let u1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		u1TranslationYAnimation.duration = 4.400
		u1TranslationYAnimation.values = [0.000, 0.000, -220.674, -220.674] as [Float]
		u1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		u1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		u1TranslationYAnimation.beginTime = beginTime
		u1TranslationYAnimation.fillMode = fillMode
		u1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["U1__root"]?.layer.add(u1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let n2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		n2ScaleXAnimation.duration = 4.400
		n2ScaleXAnimation.values = [0.120, 0.120, 0.150, 0.150] as [Float]
		n2ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		n2ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		n2ScaleXAnimation.beginTime = beginTime
		n2ScaleXAnimation.fillMode = fillMode
		n2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N2__xScale"]?.layer.add(n2ScaleXAnimation, forKey:"eyechart_ScaleX")

		let n2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		n2ScaleYAnimation.duration = 4.400
		n2ScaleYAnimation.values = [0.120, 0.120, 0.150, 0.150] as [Float]
		n2ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		n2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		n2ScaleYAnimation.beginTime = beginTime
		n2ScaleYAnimation.fillMode = fillMode
		n2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N2__yScale"]?.layer.add(n2ScaleYAnimation, forKey:"eyechart_ScaleY")

		let n2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		n2TranslationXAnimation.duration = 4.400
		n2TranslationXAnimation.values = [0.000, 0.000, -33.081, -33.081] as [Float]
		n2TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		n2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		n2TranslationXAnimation.beginTime = beginTime
		n2TranslationXAnimation.fillMode = fillMode
		n2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N2__root"]?.layer.add(n2TranslationXAnimation, forKey:"eyechart_TranslationX")

		let n2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		n2TranslationYAnimation.duration = 4.400
		n2TranslationYAnimation.values = [0.000, 0.000, -220.095, -220.095] as [Float]
		n2TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		n2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		n2TranslationYAnimation.beginTime = beginTime
		n2TranslationYAnimation.fillMode = fillMode
		n2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["N2__root"]?.layer.add(n2TranslationYAnimation, forKey:"eyechart_TranslationY")

		let b1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		b1ScaleXAnimation.duration = 4.400
		b1ScaleXAnimation.values = [0.080, 0.080, 0.210, 0.210] as [Float]
		b1ScaleXAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		b1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		b1ScaleXAnimation.beginTime = beginTime
		b1ScaleXAnimation.fillMode = fillMode
		b1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["B1__xScale"]?.layer.add(b1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let b1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		b1ScaleYAnimation.duration = 4.400
		b1ScaleYAnimation.values = [0.080, 0.080, 0.210, 0.210] as [Float]
		b1ScaleYAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		b1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		b1ScaleYAnimation.beginTime = beginTime
		b1ScaleYAnimation.fillMode = fillMode
		b1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["B1__yScale"]?.layer.add(b1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let b1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		b1TranslationXAnimation.duration = 4.400
		b1TranslationXAnimation.values = [0.000, 0.000, -154.480, -154.480] as [Float]
		b1TranslationXAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		b1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		b1TranslationXAnimation.beginTime = beginTime
		b1TranslationXAnimation.fillMode = fillMode
		b1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["B1__root"]?.layer.add(b1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let b1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		b1TranslationYAnimation.duration = 4.400
		b1TranslationYAnimation.values = [0.000, 0.000, -253.234, -253.234] as [Float]
		b1TranslationYAnimation.keyTimes = [0.000, 0.227, 0.284, 1.000] as [NSNumber]
		b1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		b1TranslationYAnimation.beginTime = beginTime
		b1TranslationYAnimation.fillMode = fillMode
		b1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["B1__root"]?.layer.add(b1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let e2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		e2ScaleXAnimation.duration = 4.400
		e2ScaleXAnimation.values = [0.150, 0.150, 0.200, 0.200] as [Float]
		e2ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		e2ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e2ScaleXAnimation.beginTime = beginTime
		e2ScaleXAnimation.fillMode = fillMode
		e2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E2__xScale"]?.layer.add(e2ScaleXAnimation, forKey:"eyechart_ScaleX")

		let e2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		e2ScaleYAnimation.duration = 4.400
		e2ScaleYAnimation.values = [0.150, 0.150, 0.200, 0.200] as [Float]
		e2ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		e2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e2ScaleYAnimation.beginTime = beginTime
		e2ScaleYAnimation.fillMode = fillMode
		e2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E2__yScale"]?.layer.add(e2ScaleYAnimation, forKey:"eyechart_ScaleY")

		let e2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		e2TranslationXAnimation.duration = 4.400
		e2TranslationXAnimation.values = [0.000, 0.000, 181.797, 181.797] as [Float]
		e2TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		e2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e2TranslationXAnimation.beginTime = beginTime
		e2TranslationXAnimation.fillMode = fillMode
		e2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E2__root"]?.layer.add(e2TranslationXAnimation, forKey:"eyechart_TranslationX")

		let e2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		e2TranslationYAnimation.duration = 4.400
		e2TranslationYAnimation.values = [0.000, 0.000, -205.875, -205.875] as [Float]
		e2TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		e2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		e2TranslationYAnimation.beginTime = beginTime
		e2TranslationYAnimation.fillMode = fillMode
		e2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["E2__root"]?.layer.add(e2TranslationYAnimation, forKey:"eyechart_TranslationY")

		let v1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		v1ScaleXAnimation.duration = 4.400
		v1ScaleXAnimation.values = [0.120, 0.120, 0.150, 0.150] as [Float]
		v1ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		v1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		v1ScaleXAnimation.beginTime = beginTime
		v1ScaleXAnimation.fillMode = fillMode
		v1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["V1__xScale"]?.layer.add(v1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let v1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		v1ScaleYAnimation.duration = 4.400
		v1ScaleYAnimation.values = [0.120, 0.120, 0.150, 0.150] as [Float]
		v1ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		v1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		v1ScaleYAnimation.beginTime = beginTime
		v1ScaleYAnimation.fillMode = fillMode
		v1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["V1__yScale"]?.layer.add(v1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let v1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		v1TranslationXAnimation.duration = 4.400
		v1TranslationXAnimation.values = [0.000, 0.000, -166.184, -166.184] as [Float]
		v1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		v1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		v1TranslationXAnimation.beginTime = beginTime
		v1TranslationXAnimation.fillMode = fillMode
		v1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["V1__root"]?.layer.add(v1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let v1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		v1TranslationYAnimation.duration = 4.400
		v1TranslationYAnimation.values = [0.000, 0.000, -221.281, -221.281] as [Float]
		v1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		v1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		v1TranslationYAnimation.beginTime = beginTime
		v1TranslationYAnimation.fillMode = fillMode
		v1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["V1__root"]?.layer.add(v1TranslationYAnimation, forKey:"eyechart_TranslationY")

		let i4ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		i4ScaleXAnimation.duration = 4.400
		i4ScaleXAnimation.values = [0.100, 0.100, 0.150, 0.150] as [Float]
		i4ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i4ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i4ScaleXAnimation.beginTime = beginTime
		i4ScaleXAnimation.fillMode = fillMode
		i4ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I4__xScale"]?.layer.add(i4ScaleXAnimation, forKey:"eyechart_ScaleX")

		let i4ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		i4ScaleYAnimation.duration = 4.400
		i4ScaleYAnimation.values = [0.100, 0.100, 0.150, 0.150] as [Float]
		i4ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i4ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i4ScaleYAnimation.beginTime = beginTime
		i4ScaleYAnimation.fillMode = fillMode
		i4ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I4__yScale"]?.layer.add(i4ScaleYAnimation, forKey:"eyechart_ScaleY")

		let i4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		i4TranslationXAnimation.duration = 4.400
		i4TranslationXAnimation.values = [0.000, 0.000, 135.000, 135.000] as [Float]
		i4TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i4TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i4TranslationXAnimation.beginTime = beginTime
		i4TranslationXAnimation.fillMode = fillMode
		i4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I4__root"]?.layer.add(i4TranslationXAnimation, forKey:"eyechart_TranslationX")

		let i4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		i4TranslationYAnimation.duration = 4.400
		i4TranslationYAnimation.values = [0.000, 0.000, -221.000, -221.000] as [Float]
		i4TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		i4TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		i4TranslationYAnimation.beginTime = beginTime
		i4TranslationYAnimation.fillMode = fillMode
		i4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["I4__root"]?.layer.add(i4TranslationYAnimation, forKey:"eyechart_TranslationY")

		let h1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		h1ScaleXAnimation.duration = 4.400
		h1ScaleXAnimation.values = [0.150, 0.150, 0.200, 0.200] as [Float]
		h1ScaleXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		h1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		h1ScaleXAnimation.beginTime = beginTime
		h1ScaleXAnimation.fillMode = fillMode
		h1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["H1__xScale"]?.layer.add(h1ScaleXAnimation, forKey:"eyechart_ScaleX")

		let h1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		h1ScaleYAnimation.duration = 4.400
		h1ScaleYAnimation.values = [0.150, 0.150, 0.200, 0.200] as [Float]
		h1ScaleYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		h1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		h1ScaleYAnimation.beginTime = beginTime
		h1ScaleYAnimation.fillMode = fillMode
		h1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["H1__yScale"]?.layer.add(h1ScaleYAnimation, forKey:"eyechart_ScaleY")

		let h1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		h1TranslationXAnimation.duration = 4.400
		h1TranslationXAnimation.values = [0.000, 0.000, 29.607, 29.607] as [Float]
		h1TranslationXAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		h1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		h1TranslationXAnimation.beginTime = beginTime
		h1TranslationXAnimation.fillMode = fillMode
		h1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["H1__root"]?.layer.add(h1TranslationXAnimation, forKey:"eyechart_TranslationX")

		let h1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		h1TranslationYAnimation.duration = 4.400
		h1TranslationYAnimation.values = [0.000, 0.000, -204.768, -204.768] as [Float]
		h1TranslationYAnimation.keyTimes = [0.000, 0.284, 0.455, 1.000] as [NSNumber]
		h1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		h1TranslationYAnimation.beginTime = beginTime
		h1TranslationYAnimation.fillMode = fillMode
		h1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["H1__root"]?.layer.add(h1TranslationYAnimation, forKey:"eyechart_TranslationY")
	}

	func removeEyechartAnimation() {
		self.layer.removeAnimation(forKey: "Eyechart")
		self.viewsByName["I2__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["I2__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["I2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["I2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["R1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["R1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["R1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["R1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["S1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["S1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["A1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["B1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["boxerwachler-head__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["C1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["E1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["E2__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["E3__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["H1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["I1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["I2__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["I3__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["I4__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["L1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["N1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["N2__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["O1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["O2__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["R1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["R2__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["S1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["S2__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["T1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["T2__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["T3__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["U1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["V1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["W1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["X1__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["circlefilled__root"]?.layer.removeAnimation(forKey: "eyechart_ZPosition")
		self.viewsByName["E1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["E1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["E1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["E1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["I3__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["I3__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["I3__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["I3__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["R2__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["R2__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["R2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["R2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["I1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["I1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["circlefilled_mask__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["T1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["T1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["T1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["T1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["C1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["C1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["O1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["O1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["W1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["W1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["W1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["W1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["N1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["N1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["N1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["N1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["L1__root"]?.layer.removeAnimation(forKey: "eyechart_Opacity")
		self.viewsByName["L1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["L1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["L1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["L1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["S2__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["S2__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["S2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["S2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["E3__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["E3__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["O2__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["O2__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["O2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["O2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["X1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["X1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["X1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["X1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["T3__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["T3__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["T3__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["T3__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["A1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["A1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["A1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["A1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["T2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["T2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["U1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["U1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["U1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["U1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["N2__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["N2__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["N2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["N2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["B1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["B1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["B1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["B1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["E2__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["E2__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["E2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["E2__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["V1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["V1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["V1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["V1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["I4__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["I4__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["I4__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["I4__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
		self.viewsByName["H1__xScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleX")
		self.viewsByName["H1__yScale"]?.layer.removeAnimation(forKey: "eyechart_ScaleY")
		self.viewsByName["H1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationX")
		self.viewsByName["H1__root"]?.layer.removeAnimation(forKey: "eyechart_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Eyechart")
	}
}